
output/main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000838  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000838  000008cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002e  00800062  00800062  000008ce  2**0
                  ALLOC
  3 .comment      00000012  00000000  00000000  000008ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000008e0  2**2
                  CONTENTS, READONLY, OCTETS
  5 .debug_aranges 00000210  00000000  00000000  00000920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   000015b0  00000000  00000000  00000b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 00000e2a  00000000  00000000  000020e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_line   00001ab1  00000000  00000000  00002f0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_frame  00000294  00000000  00000000  000049bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_str    000005d5  00000000  00000000  00004c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line_str 00000184  00000000  00000000  00005225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loclists 00000836  00000000  00000000  000053a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000011e  00000000  00000000  00005bdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
   0:	1f c0       	rjmp	.+62     	; 0x40 <__ctors_end>
   2:	39 c0       	rjmp	.+114    	; 0x76 <__bad_interrupt>
   4:	38 c0       	rjmp	.+112    	; 0x76 <__bad_interrupt>
   6:	37 c0       	rjmp	.+110    	; 0x76 <__bad_interrupt>
   8:	36 c0       	rjmp	.+108    	; 0x76 <__bad_interrupt>
   a:	35 c0       	rjmp	.+106    	; 0x76 <__bad_interrupt>
   c:	0a c1       	rjmp	.+532    	; 0x222 <__vector_6>
   e:	33 c0       	rjmp	.+102    	; 0x76 <__bad_interrupt>
  10:	32 c0       	rjmp	.+100    	; 0x76 <__bad_interrupt>
  12:	e2 c0       	rjmp	.+452    	; 0x1d8 <__vector_9>
  14:	30 c0       	rjmp	.+96     	; 0x76 <__bad_interrupt>
  16:	2f c0       	rjmp	.+94     	; 0x76 <__bad_interrupt>
  18:	2e c0       	rjmp	.+92     	; 0x76 <__bad_interrupt>
  1a:	2d c0       	rjmp	.+90     	; 0x76 <__bad_interrupt>
  1c:	2d c0       	rjmp	.+90     	; 0x78 <__vector_14>
  1e:	2b c0       	rjmp	.+86     	; 0x76 <__bad_interrupt>
  20:	2a c0       	rjmp	.+84     	; 0x76 <__bad_interrupt>
  22:	29 c0       	rjmp	.+82     	; 0x76 <__bad_interrupt>
  24:	28 c0       	rjmp	.+80     	; 0x76 <__bad_interrupt>

00000026 <EncState>:
  26:	00 ff 01 00 01 00 00 ff ff 00 00 01 00 01 ff 00     ................

00000036 <digits>:
  36:	3f 0c 5b 5e 6c 76 77 1c 7f 7e                       ?.[^lvw..~

00000040 <__ctors_end>:
  40:	11 24       	eor	r1, r1
  42:	1f be       	out	0x3f, r1	; 63
  44:	cf e5       	ldi	r28, 0x5F	; 95
  46:	d4 e0       	ldi	r29, 0x04	; 4
  48:	de bf       	out	0x3e, r29	; 62
  4a:	cd bf       	out	0x3d, r28	; 61

0000004c <__do_copy_data>:
  4c:	10 e0       	ldi	r17, 0x00	; 0
  4e:	a0 e6       	ldi	r26, 0x60	; 96
  50:	b0 e0       	ldi	r27, 0x00	; 0
  52:	e8 e3       	ldi	r30, 0x38	; 56
  54:	f8 e0       	ldi	r31, 0x08	; 8
  56:	02 c0       	rjmp	.+4      	; 0x5c <__do_copy_data+0x10>
  58:	05 90       	lpm	r0, Z+
  5a:	0d 92       	st	X+, r0
  5c:	a2 36       	cpi	r26, 0x62	; 98
  5e:	b1 07       	cpc	r27, r17
  60:	d9 f7       	brne	.-10     	; 0x58 <__do_copy_data+0xc>

00000062 <__do_clear_bss>:
  62:	20 e0       	ldi	r18, 0x00	; 0
  64:	a2 e6       	ldi	r26, 0x62	; 98
  66:	b0 e0       	ldi	r27, 0x00	; 0
  68:	01 c0       	rjmp	.+2      	; 0x6c <.do_clear_bss_start>

0000006a <.do_clear_bss_loop>:
  6a:	1d 92       	st	X+, r1

0000006c <.do_clear_bss_start>:
  6c:	a0 39       	cpi	r26, 0x90	; 144
  6e:	b2 07       	cpc	r27, r18
  70:	e1 f7       	brne	.-8      	; 0x6a <.do_clear_bss_loop>
  72:	5d d2       	rcall	.+1210   	; 0x52e <main>
  74:	df c3       	rjmp	.+1982   	; 0x834 <_exit>

00000076 <__bad_interrupt>:
  76:	c4 cf       	rjmp	.-120    	; 0x0 <__vectors>

00000078 <__vector_14>:
#include "board.h"

static volatile uint8_t ADC_values[]={0,0,0,0}; //8 бит АЦП пока
static volatile uint8_t ADC_counter=0;
static volatile uint16_t ADC0_value=0;
ISR(ADC_vect) {
  78:	1f 92       	push	r1
  7a:	1f b6       	in	r1, 0x3f	; 63
  7c:	1f 92       	push	r1
  7e:	11 24       	eor	r1, r1
  80:	8f 93       	push	r24
  82:	9f 93       	push	r25
  84:	ef 93       	push	r30
  86:	ff 93       	push	r31
	ADC_values[ADC_counter]=ADCH;
  88:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <ADC_counter>
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	85 b1       	in	r24, 0x05	; 5
  90:	e5 59       	subi	r30, 0x95	; 149
  92:	ff 4f       	sbci	r31, 0xFF	; 255
  94:	80 83       	st	Z, r24
	ADMUX|=0b00001111; //все каналы АЦП сажаем на землю, перобразование окончено
  96:	87 b1       	in	r24, 0x07	; 7
  98:	8f 60       	ori	r24, 0x0F	; 15
  9a:	87 b9       	out	0x07, r24	; 7
	ADC_counter++;
  9c:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <ADC_counter>
  a0:	8f 5f       	subi	r24, 0xFF	; 255
  a2:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <ADC_counter>
	if (ADC_counter<4) {
  a6:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <ADC_counter>
  aa:	84 30       	cpi	r24, 0x04	; 4
  ac:	78 f4       	brcc	.+30     	; 0xcc <__vector_14+0x54>
		ADMUX=(ADMUX&(~15))|ADC_counter; //подключаем нужный канал
  ae:	87 b1       	in	r24, 0x07	; 7
  b0:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <ADC_counter>
  b4:	80 7f       	andi	r24, 0xF0	; 240
  b6:	89 2b       	or	r24, r25
	}
	else {
		ADC_counter=0; //сбрасываем счетчик
		ADMUX=(ADMUX&(~15));//подключаем нулевой канал АЦП
  b8:	87 b9       	out	0x07, r24	; 7
	}
	ADCSRA|=(_BV(6)); //так рабоатет в режиме фри  ранинг моде херня со смещением данных с каналов в массиве
  ba:	36 9a       	sbi	0x06, 6	; 6
}
  bc:	ff 91       	pop	r31
  be:	ef 91       	pop	r30
  c0:	9f 91       	pop	r25
  c2:	8f 91       	pop	r24
  c4:	1f 90       	pop	r1
  c6:	1f be       	out	0x3f, r1	; 63
  c8:	1f 90       	pop	r1
  ca:	18 95       	reti
		ADC_counter=0; //сбрасываем счетчик
  cc:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <ADC_counter>
		ADMUX=(ADMUX&(~15));//подключаем нулевой канал АЦП
  d0:	87 b1       	in	r24, 0x07	; 7
  d2:	80 7f       	andi	r24, 0xF0	; 240
  d4:	f1 cf       	rjmp	.-30     	; 0xb8 <__vector_14+0x40>

000000d6 <Adc>:
Скользящее: убираем последнее, сдвигаем все и записываем новое.
Табуляция значений 8-бит АЦП в тупую требует 256 байт флэша, второй вариант - тупо пересчет
(математика, либо сдвиги, либо придумывать чнго)
*/
PT_THREAD(Adc(struct pt *pt))
{
  d6:	cf 93       	push	r28
  d8:	df 93       	push	r29
  da:	00 d0       	rcall	.+0      	; 0xdc <Adc+0x6>
  dc:	00 d0       	rcall	.+0      	; 0xde <Adc+0x8>
  de:	00 d0       	rcall	.+0      	; 0xe0 <Adc+0xa>
  e0:	cd b7       	in	r28, 0x3d	; 61
  e2:	de b7       	in	r29, 0x3e	; 62
  e4:	8d 83       	std	Y+5, r24	; 0x05
  e6:	9e 83       	std	Y+6, r25	; 0x06
	static volatile uint8_t adc_lcd_timer=0, averaging=0;
	static volatile uint32_t aver_value=0; 
	//volatile uint8_t *ptr;
	PT_BEGIN(pt);
  e8:	ed 81       	ldd	r30, Y+5	; 0x05
  ea:	fe 81       	ldd	r31, Y+6	; 0x06
  ec:	80 81       	ld	r24, Z
  ee:	91 81       	ldd	r25, Z+1	; 0x01
  f0:	00 97       	sbiw	r24, 0x00	; 0
  f2:	81 f0       	breq	.+32     	; 0x114 <Adc+0x3e>
  f4:	4f 97       	sbiw	r24, 0x1f	; 31
  f6:	a1 f0       	breq	.+40     	; 0x120 <Adc+0x4a>
		//ptr=&SCR_D[0];
		//ptr=(volatile uint8_t *)utoa_fast_div((uint32_t)ADC0_value, (uint8_t *)ptr);
		aver_value=0;
		}
	adc_lcd_timer=st_millis();
	PT_END(pt);
  f8:	ed 81       	ldd	r30, Y+5	; 0x05
  fa:	fe 81       	ldd	r31, Y+6	; 0x06
  fc:	11 82       	std	Z+1, r1	; 0x01
  fe:	10 82       	st	Z, r1
 100:	83 e0       	ldi	r24, 0x03	; 3
}
 102:	26 96       	adiw	r28, 0x06	; 6
 104:	0f b6       	in	r0, 0x3f	; 63
 106:	f8 94       	cli
 108:	de bf       	out	0x3e, r29	; 62
 10a:	0f be       	out	0x3f, r0	; 63
 10c:	cd bf       	out	0x3d, r28	; 61
 10e:	df 91       	pop	r29
 110:	cf 91       	pop	r28
 112:	08 95       	ret
	PT_WAIT_UNTIL(pt,(st_millis()-adc_lcd_timer)>=10);
 114:	8f e1       	ldi	r24, 0x1F	; 31
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	ed 81       	ldd	r30, Y+5	; 0x05
 11a:	fe 81       	ldd	r31, Y+6	; 0x06
 11c:	91 83       	std	Z+1, r25	; 0x01
 11e:	80 83       	st	Z, r24
 120:	86 d0       	rcall	.+268    	; 0x22e <st_millis>
 122:	69 83       	std	Y+1, r22	; 0x01
 124:	7a 83       	std	Y+2, r23	; 0x02
 126:	8b 83       	std	Y+3, r24	; 0x03
 128:	9c 83       	std	Y+4, r25	; 0x04
 12a:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <adc_lcd_timer.2>
 12e:	29 81       	ldd	r18, Y+1	; 0x01
 130:	3a 81       	ldd	r19, Y+2	; 0x02
 132:	4b 81       	ldd	r20, Y+3	; 0x03
 134:	5c 81       	ldd	r21, Y+4	; 0x04
 136:	28 1b       	sub	r18, r24
 138:	31 09       	sbc	r19, r1
 13a:	41 09       	sbc	r20, r1
 13c:	51 09       	sbc	r21, r1
 13e:	da 01       	movw	r26, r20
 140:	c9 01       	movw	r24, r18
 142:	0a 97       	sbiw	r24, 0x0a	; 10
 144:	a1 05       	cpc	r26, r1
 146:	b1 05       	cpc	r27, r1
 148:	08 f4       	brcc	.+2      	; 0x14c <Adc+0x76>
 14a:	44 c0       	rjmp	.+136    	; 0x1d4 <Adc+0xfe>
	ADCSRA|=(_BV(7))|(_BV(6));//заупск преобразования АЦП
 14c:	86 b1       	in	r24, 0x06	; 6
 14e:	80 6c       	ori	r24, 0xC0	; 192
 150:	86 b9       	out	0x06, r24	; 6
	if (averaging<32) {
 152:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <averaging.1>
 156:	80 32       	cpi	r24, 0x20	; 32
 158:	f8 f4       	brcc	.+62     	; 0x198 <Adc+0xc2>
		averaging++;
 15a:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <averaging.1>
 15e:	8f 5f       	subi	r24, 0xFF	; 255
 160:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <averaging.1>
		aver_value+=ADC_values[0];
 164:	20 91 6b 00 	lds	r18, 0x006B	; 0x80006b <ADC_values>
 168:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <aver_value.0>
 16c:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <aver_value.0+0x1>
 170:	a0 91 64 00 	lds	r26, 0x0064	; 0x800064 <aver_value.0+0x2>
 174:	b0 91 65 00 	lds	r27, 0x0065	; 0x800065 <aver_value.0+0x3>
 178:	82 0f       	add	r24, r18
 17a:	91 1d       	adc	r25, r1
 17c:	a1 1d       	adc	r26, r1
 17e:	b1 1d       	adc	r27, r1
 180:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <aver_value.0>
 184:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <aver_value.0+0x1>
 188:	a0 93 64 00 	sts	0x0064, r26	; 0x800064 <aver_value.0+0x2>
 18c:	b0 93 65 00 	sts	0x0065, r27	; 0x800065 <aver_value.0+0x3>
	adc_lcd_timer=st_millis();
 190:	4e d0       	rcall	.+156    	; 0x22e <st_millis>
 192:	60 93 67 00 	sts	0x0067, r22	; 0x800067 <adc_lcd_timer.2>
 196:	b0 cf       	rjmp	.-160    	; 0xf8 <Adc+0x22>
		averaging=0;
 198:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <averaging.1>
		ADC0_value=aver_value>>5;//&&((st_millis()-adc_lcd_timer)>=1)
 19c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <aver_value.0>
 1a0:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <aver_value.0+0x1>
 1a4:	a0 91 64 00 	lds	r26, 0x0064	; 0x800064 <aver_value.0+0x2>
 1a8:	b0 91 65 00 	lds	r27, 0x0065	; 0x800065 <aver_value.0+0x3>
 1ac:	25 e0       	ldi	r18, 0x05	; 5
 1ae:	b6 95       	lsr	r27
 1b0:	a7 95       	ror	r26
 1b2:	97 95       	ror	r25
 1b4:	87 95       	ror	r24
 1b6:	2a 95       	dec	r18
 1b8:	d1 f7       	brne	.-12     	; 0x1ae <Adc+0xd8>
 1ba:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <ADC0_value+0x1>
 1be:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <ADC0_value>
		aver_value=0;
 1c2:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <aver_value.0>
 1c6:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <aver_value.0+0x1>
 1ca:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <aver_value.0+0x2>
 1ce:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <aver_value.0+0x3>
 1d2:	de cf       	rjmp	.-68     	; 0x190 <Adc+0xba>
	PT_WAIT_UNTIL(pt,(st_millis()-adc_lcd_timer)>=10);
 1d4:	80 e0       	ldi	r24, 0x00	; 0
	PT_END(pt);
 1d6:	95 cf       	rjmp	.-214    	; 0x102 <Adc+0x2c>

000001d8 <__vector_9>:
﻿#include "board.h"
volatile static uint32_t st_timer0_millis;

ISR(TIMER0_OVF_vect) {
 1d8:	1f 92       	push	r1
 1da:	1f b6       	in	r1, 0x3f	; 63
 1dc:	1f 92       	push	r1
 1de:	11 24       	eor	r1, r1
 1e0:	8f 93       	push	r24
 1e2:	9f 93       	push	r25
 1e4:	af 93       	push	r26
 1e6:	bf 93       	push	r27
	st_timer0_millis++;
 1e8:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <st_timer0_millis>
 1ec:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <st_timer0_millis+0x1>
 1f0:	a0 91 71 00 	lds	r26, 0x0071	; 0x800071 <st_timer0_millis+0x2>
 1f4:	b0 91 72 00 	lds	r27, 0x0072	; 0x800072 <st_timer0_millis+0x3>
 1f8:	01 96       	adiw	r24, 0x01	; 1
 1fa:	a1 1d       	adc	r26, r1
 1fc:	b1 1d       	adc	r27, r1
 1fe:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <st_timer0_millis>
 202:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <st_timer0_millis+0x1>
 206:	a0 93 71 00 	sts	0x0071, r26	; 0x800071 <st_timer0_millis+0x2>
 20a:	b0 93 72 00 	sts	0x0072, r27	; 0x800072 <st_timer0_millis+0x3>
	TCNT0 = ST_CTC_HANDMADE;
 20e:	85 ef       	ldi	r24, 0xF5	; 245
 210:	82 bf       	out	0x32, r24	; 50
}
 212:	bf 91       	pop	r27
 214:	af 91       	pop	r26
 216:	9f 91       	pop	r25
 218:	8f 91       	pop	r24
 21a:	1f 90       	pop	r1
 21c:	1f be       	out	0x3f, r1	; 63
 21e:	1f 90       	pop	r1
 220:	18 95       	reti

00000222 <__vector_6>:
ISR(TIMER1_COMPA_vect) {
 222:	8f 93       	push	r24
	OCR1AL=EncoderValue;
 224:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <EncoderValue>
 228:	8a bd       	out	0x2a, r24	; 42
}
 22a:	8f 91       	pop	r24
 22c:	18 95       	reti

0000022e <st_millis>:
uint32_t st_millis(void) {
 22e:	cf 93       	push	r28
 230:	df 93       	push	r29
 232:	00 d0       	rcall	.+0      	; 0x234 <st_millis+0x6>
 234:	00 d0       	rcall	.+0      	; 0x236 <st_millis+0x8>
 236:	cd b7       	in	r28, 0x3d	; 61
 238:	de b7       	in	r29, 0x3e	; 62
	uint32_t m;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 23a:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 23c:	f8 94       	cli
	{
		m = st_timer0_millis;
 23e:	20 91 6f 00 	lds	r18, 0x006F	; 0x80006f <st_timer0_millis>
 242:	30 91 70 00 	lds	r19, 0x0070	; 0x800070 <st_timer0_millis+0x1>
 246:	40 91 71 00 	lds	r20, 0x0071	; 0x800071 <st_timer0_millis+0x2>
 24a:	50 91 72 00 	lds	r21, 0x0072	; 0x800072 <st_timer0_millis+0x3>
 24e:	29 83       	std	Y+1, r18	; 0x01
 250:	3a 83       	std	Y+2, r19	; 0x02
 252:	4b 83       	std	Y+3, r20	; 0x03
 254:	5c 83       	std	Y+4, r21	; 0x04
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 256:	8f bf       	out	0x3f, r24	; 63
	}
	return m;
}
 258:	69 81       	ldd	r22, Y+1	; 0x01
 25a:	7a 81       	ldd	r23, Y+2	; 0x02
 25c:	8b 81       	ldd	r24, Y+3	; 0x03
 25e:	9c 81       	ldd	r25, Y+4	; 0x04
 260:	0f 90       	pop	r0
 262:	0f 90       	pop	r0
 264:	0f 90       	pop	r0
 266:	0f 90       	pop	r0
 268:	df 91       	pop	r29
 26a:	cf 91       	pop	r28
 26c:	08 95       	ret

0000026e <EncoderScan>:
	else ButtonState=BUTTON_ON;
}
*/

PT_THREAD(EncoderScan(struct pt *pt))
{
 26e:	cf 93       	push	r28
 270:	df 93       	push	r29
 272:	00 d0       	rcall	.+0      	; 0x274 <EncoderScan+0x6>
 274:	00 d0       	rcall	.+0      	; 0x276 <EncoderScan+0x8>
 276:	00 d0       	rcall	.+0      	; 0x278 <EncoderScan+0xa>
 278:	cd b7       	in	r28, 0x3d	; 61
 27a:	de b7       	in	r29, 0x3e	; 62
 27c:	8d 83       	std	Y+5, r24	; 0x05
 27e:	9e 83       	std	Y+6, r25	; 0x06
	static	uint8_t	EncVal=1;
	static	uint8_t	Enc=0;
	static uint8_t enc_timer=0;
	
	PT_BEGIN(pt);
 280:	ed 81       	ldd	r30, Y+5	; 0x05
 282:	fe 81       	ldd	r31, Y+6	; 0x06
 284:	80 81       	ld	r24, Z
 286:	91 81       	ldd	r25, Z+1	; 0x01
 288:	87 32       	cpi	r24, 0x27	; 39
 28a:	91 05       	cpc	r25, r1
 28c:	51 f0       	breq	.+20     	; 0x2a2 <EncoderScan+0x34>
 28e:	8b 32       	cpi	r24, 0x2B	; 43
 290:	91 05       	cpc	r25, r1
 292:	d9 f1       	breq	.+118    	; 0x30a <EncoderScan+0x9c>
 294:	89 2b       	or	r24, r25
 296:	09 f0       	breq	.+2      	; 0x29a <EncoderScan+0x2c>
 298:	6b c0       	rjmp	.+214    	; 0x370 <EncoderScan+0x102>
	PT_WAIT_UNTIL(pt, st_millis()-enc_timer>=1);
 29a:	87 e2       	ldi	r24, 0x27	; 39
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	91 83       	std	Z+1, r25	; 0x01
 2a0:	80 83       	st	Z, r24
 2a2:	c5 df       	rcall	.-118    	; 0x22e <st_millis>
 2a4:	69 83       	std	Y+1, r22	; 0x01
 2a6:	7a 83       	std	Y+2, r23	; 0x02
 2a8:	8b 83       	std	Y+3, r24	; 0x03
 2aa:	9c 83       	std	Y+4, r25	; 0x04
 2ac:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <enc_timer.4>
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	b0 e0       	ldi	r27, 0x00	; 0
 2b4:	a0 e0       	ldi	r26, 0x00	; 0
 2b6:	29 81       	ldd	r18, Y+1	; 0x01
 2b8:	3a 81       	ldd	r19, Y+2	; 0x02
 2ba:	4b 81       	ldd	r20, Y+3	; 0x03
 2bc:	5c 81       	ldd	r21, Y+4	; 0x04
 2be:	28 17       	cp	r18, r24
 2c0:	39 07       	cpc	r19, r25
 2c2:	4a 07       	cpc	r20, r26
 2c4:	5b 07       	cpc	r21, r27
 2c6:	51 f4       	brne	.+20     	; 0x2dc <EncoderScan+0x6e>
 2c8:	80 e0       	ldi	r24, 0x00	; 0
	if (EncVal > 254) EncVal = 254; //600 = 6A current
	
	EncoderValue=EncVal;
	
	PT_END(pt);
}
 2ca:	26 96       	adiw	r28, 0x06	; 6
 2cc:	0f b6       	in	r0, 0x3f	; 63
 2ce:	f8 94       	cli
 2d0:	de bf       	out	0x3e, r29	; 62
 2d2:	0f be       	out	0x3f, r0	; 63
 2d4:	cd bf       	out	0x3d, r28	; 61
 2d6:	df 91       	pop	r29
 2d8:	cf 91       	pop	r28
 2da:	08 95       	ret
	enc_timer=st_millis();
 2dc:	a8 df       	rcall	.-176    	; 0x22e <st_millis>
 2de:	60 93 7a 00 	sts	0x007A, r22	; 0x80007a <enc_timer.4>
	Enc += ((PIN(ENCPOLL_PORT) & ((1<<ENCPOLL_A_PIN)|(1<<ENCPOLL_B_PIN)))>>3);
 2e2:	86 b3       	in	r24, 0x16	; 22
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	23 e0       	ldi	r18, 0x03	; 3
 2e8:	95 95       	asr	r25
 2ea:	87 95       	ror	r24
 2ec:	2a 95       	dec	r18
 2ee:	e1 f7       	brne	.-8      	; 0x2e8 <EncoderScan+0x7a>
 2f0:	83 70       	andi	r24, 0x03	; 3
 2f2:	99 27       	eor	r25, r25
 2f4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <Enc.3>
 2f8:	89 0f       	add	r24, r25
 2fa:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <Enc.3>
	PT_WAIT_UNTIL(pt, st_millis()-enc_timer>=1);
 2fe:	8b e2       	ldi	r24, 0x2B	; 43
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	ed 81       	ldd	r30, Y+5	; 0x05
 304:	fe 81       	ldd	r31, Y+6	; 0x06
 306:	91 83       	std	Z+1, r25	; 0x01
 308:	80 83       	st	Z, r24
 30a:	91 df       	rcall	.-222    	; 0x22e <st_millis>
 30c:	69 83       	std	Y+1, r22	; 0x01
 30e:	7a 83       	std	Y+2, r23	; 0x02
 310:	8b 83       	std	Y+3, r24	; 0x03
 312:	9c 83       	std	Y+4, r25	; 0x04
 314:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <enc_timer.4>
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	b0 e0       	ldi	r27, 0x00	; 0
 31c:	a0 e0       	ldi	r26, 0x00	; 0
 31e:	29 81       	ldd	r18, Y+1	; 0x01
 320:	3a 81       	ldd	r19, Y+2	; 0x02
 322:	4b 81       	ldd	r20, Y+3	; 0x03
 324:	5c 81       	ldd	r21, Y+4	; 0x04
 326:	28 17       	cp	r18, r24
 328:	39 07       	cpc	r19, r25
 32a:	4a 07       	cpc	r20, r26
 32c:	5b 07       	cpc	r21, r27
 32e:	61 f2       	breq	.-104    	; 0x2c8 <EncoderScan+0x5a>
	EncVal -= pgm_read_byte(&(EncState[Enc]));
 330:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <Enc.3>
 334:	e8 2f       	mov	r30, r24
 336:	f0 e0       	ldi	r31, 0x00	; 0
 338:	ea 5d       	subi	r30, 0xDA	; 218
 33a:	ff 4f       	sbci	r31, 0xFF	; 255
 33c:	e4 91       	lpm	r30, Z
 33e:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <EncVal.2>
 342:	9e 1b       	sub	r25, r30
 344:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <EncVal.2>
	Enc <<= 2;
 348:	88 0f       	add	r24, r24
 34a:	88 0f       	add	r24, r24
	Enc &= 0b00001111;
 34c:	8f 70       	andi	r24, 0x0F	; 15
 34e:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <Enc.3>
	if (EncVal < 1) EncVal = 1;
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	99 23       	and	r25, r25
 356:	19 f0       	breq	.+6      	; 0x35e <EncoderScan+0xf0>
	if (EncVal > 254) EncVal = 254; //600 = 6A current
 358:	9f 3f       	cpi	r25, 0xFF	; 255
 35a:	19 f4       	brne	.+6      	; 0x362 <EncoderScan+0xf4>
 35c:	8e ef       	ldi	r24, 0xFE	; 254
 35e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <EncVal.2>
	EncoderValue=EncVal;
 362:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <EncVal.2>
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <EncoderValue+0x1>
 36c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <EncoderValue>
	PT_END(pt);
 370:	ed 81       	ldd	r30, Y+5	; 0x05
 372:	fe 81       	ldd	r31, Y+6	; 0x06
 374:	11 82       	std	Z+1, r1	; 0x01
 376:	10 82       	st	Z, r1
 378:	83 e0       	ldi	r24, 0x03	; 3
 37a:	a7 cf       	rjmp	.-178    	; 0x2ca <EncoderScan+0x5c>

0000037c <EncoderButton>:
PT_THREAD(EncoderButton(struct pt *pt))
{
 37c:	cf 93       	push	r28
 37e:	df 93       	push	r29
 380:	00 d0       	rcall	.+0      	; 0x382 <EncoderButton+0x6>
 382:	00 d0       	rcall	.+0      	; 0x384 <EncoderButton+0x8>
 384:	00 d0       	rcall	.+0      	; 0x386 <EncoderButton+0xa>
 386:	cd b7       	in	r28, 0x3d	; 61
 388:	de b7       	in	r29, 0x3e	; 62
 38a:	8d 83       	std	Y+5, r24	; 0x05
 38c:	9e 83       	std	Y+6, r25	; 0x06
	static uint32_t but_timer=0;
	static uint16_t val=0;
	PT_BEGIN(pt);
 38e:	ad 81       	ldd	r26, Y+5	; 0x05
 390:	be 81       	ldd	r27, Y+6	; 0x06
 392:	8d 91       	ld	r24, X+
 394:	9c 91       	ld	r25, X
 396:	11 97       	sbiw	r26, 0x01	; 1
 398:	8d 33       	cpi	r24, 0x3D	; 61
 39a:	91 05       	cpc	r25, r1
 39c:	51 f0       	breq	.+20     	; 0x3b2 <EncoderButton+0x36>
 39e:	88 34       	cpi	r24, 0x48	; 72
 3a0:	91 05       	cpc	r25, r1
 3a2:	09 f4       	brne	.+2      	; 0x3a6 <EncoderButton+0x2a>
 3a4:	4e c0       	rjmp	.+156    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 3a6:	89 2b       	or	r24, r25
 3a8:	e1 f5       	brne	.+120    	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
	PT_WAIT_UNTIL(pt, (st_millis()-but_timer)>=1);
 3aa:	8d e3       	ldi	r24, 0x3D	; 61
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	8d 93       	st	X+, r24
 3b0:	9c 93       	st	X, r25
 3b2:	3d df       	rcall	.-390    	; 0x22e <st_millis>
 3b4:	69 83       	std	Y+1, r22	; 0x01
 3b6:	7a 83       	std	Y+2, r23	; 0x02
 3b8:	8b 83       	std	Y+3, r24	; 0x03
 3ba:	9c 83       	std	Y+4, r25	; 0x04
 3bc:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <but_timer.1>
 3c0:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <but_timer.1+0x1>
 3c4:	a0 91 77 00 	lds	r26, 0x0077	; 0x800077 <but_timer.1+0x2>
 3c8:	b0 91 78 00 	lds	r27, 0x0078	; 0x800078 <but_timer.1+0x3>
 3cc:	29 81       	ldd	r18, Y+1	; 0x01
 3ce:	3a 81       	ldd	r19, Y+2	; 0x02
 3d0:	4b 81       	ldd	r20, Y+3	; 0x03
 3d2:	5c 81       	ldd	r21, Y+4	; 0x04
 3d4:	28 17       	cp	r18, r24
 3d6:	39 07       	cpc	r19, r25
 3d8:	4a 07       	cpc	r20, r26
 3da:	5b 07       	cpc	r21, r27
 3dc:	51 f4       	brne	.+20     	; 0x3f2 <EncoderButton+0x76>
 3de:	80 e0       	ldi	r24, 0x00	; 0
			//button_change_state();
		}
		val=0;
	}
	PT_END(pt);
}
 3e0:	26 96       	adiw	r28, 0x06	; 6
 3e2:	0f b6       	in	r0, 0x3f	; 63
 3e4:	f8 94       	cli
 3e6:	de bf       	out	0x3e, r29	; 62
 3e8:	0f be       	out	0x3f, r0	; 63
 3ea:	cd bf       	out	0x3d, r28	; 61
 3ec:	df 91       	pop	r29
 3ee:	cf 91       	pop	r28
 3f0:	08 95       	ret
	but_timer=st_millis();
 3f2:	1d df       	rcall	.-454    	; 0x22e <st_millis>
 3f4:	60 93 75 00 	sts	0x0075, r22	; 0x800075 <but_timer.1>
 3f8:	70 93 76 00 	sts	0x0076, r23	; 0x800076 <but_timer.1+0x1>
 3fc:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <but_timer.1+0x2>
 400:	90 93 78 00 	sts	0x0078, r25	; 0x800078 <but_timer.1+0x3>
	if (((PIN(ENCBUT_PORT)&(_BV(ENCBUT_PIN)))==0)&&(val<=1000))
 404:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <val.0>
 408:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <val.0+0x1>
 40c:	b5 99       	sbic	0x16, 5	; 22
 40e:	0f c0       	rjmp	.+30     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 410:	89 3e       	cpi	r24, 0xE9	; 233
 412:	33 e0       	ldi	r19, 0x03	; 3
 414:	93 07       	cpc	r25, r19
 416:	58 f4       	brcc	.+22     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
		val++;
 418:	01 96       	adiw	r24, 0x01	; 1
 41a:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <val.0+0x1>
 41e:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <val.0>
	PT_END(pt);
 422:	ad 81       	ldd	r26, Y+5	; 0x05
 424:	be 81       	ldd	r27, Y+6	; 0x06
 426:	1d 92       	st	X+, r1
 428:	1c 92       	st	X, r1
 42a:	83 e0       	ldi	r24, 0x03	; 3
 42c:	d9 cf       	rjmp	.-78     	; 0x3e0 <EncoderButton+0x64>
		if (val>900)
 42e:	85 38       	cpi	r24, 0x85	; 133
 430:	43 e0       	ldi	r20, 0x03	; 3
 432:	94 07       	cpc	r25, r20
 434:	40 f1       	brcs	.+80     	; 0x486 <__stack+0x27>
			PT_WAIT_UNTIL(pt,(st_millis()-but_timer)>=1000);
 436:	88 e4       	ldi	r24, 0x48	; 72
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	ad 81       	ldd	r26, Y+5	; 0x05
 43c:	be 81       	ldd	r27, Y+6	; 0x06
 43e:	8d 93       	st	X+, r24
 440:	9c 93       	st	X, r25
 442:	f5 de       	rcall	.-534    	; 0x22e <st_millis>
 444:	69 83       	std	Y+1, r22	; 0x01
 446:	7a 83       	std	Y+2, r23	; 0x02
 448:	8b 83       	std	Y+3, r24	; 0x03
 44a:	9c 83       	std	Y+4, r25	; 0x04
 44c:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <but_timer.1>
 450:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <but_timer.1+0x1>
 454:	a0 91 77 00 	lds	r26, 0x0077	; 0x800077 <but_timer.1+0x2>
 458:	b0 91 78 00 	lds	r27, 0x0078	; 0x800078 <but_timer.1+0x3>
 45c:	29 81       	ldd	r18, Y+1	; 0x01
 45e:	3a 81       	ldd	r19, Y+2	; 0x02
 460:	4b 81       	ldd	r20, Y+3	; 0x03
 462:	5c 81       	ldd	r21, Y+4	; 0x04
 464:	28 1b       	sub	r18, r24
 466:	39 0b       	sbc	r19, r25
 468:	4a 0b       	sbc	r20, r26
 46a:	5b 0b       	sbc	r21, r27
 46c:	da 01       	movw	r26, r20
 46e:	c9 01       	movw	r24, r18
 470:	88 3e       	cpi	r24, 0xE8	; 232
 472:	93 40       	sbci	r25, 0x03	; 3
 474:	a1 05       	cpc	r26, r1
 476:	b1 05       	cpc	r27, r1
 478:	08 f4       	brcc	.+2      	; 0x47c <__stack+0x1d>
 47a:	b1 cf       	rjmp	.-158    	; 0x3de <EncoderButton+0x62>
		val=0;
 47c:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <val.0+0x1>
 480:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <val.0>
 484:	ce cf       	rjmp	.-100    	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
		else if (val>=5)
 486:	05 97       	sbiw	r24, 0x05	; 5
 488:	c8 f3       	brcs	.-14     	; 0x47c <__stack+0x1d>
			if (ButtonState==BUTTON_ADC) ButtonState=BUTTON_ENC;
 48a:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <ButtonState>
 48e:	81 11       	cpse	r24, r1
 490:	04 c0       	rjmp	.+8      	; 0x49a <__stack+0x3b>
 492:	81 e0       	ldi	r24, 0x01	; 1
			else if (ButtonState==BUTTON_ENC) ButtonState=BUTTON_PID;
 494:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <ButtonState>
 498:	f1 cf       	rjmp	.-30     	; 0x47c <__stack+0x1d>
 49a:	81 30       	cpi	r24, 0x01	; 1
 49c:	11 f4       	brne	.+4      	; 0x4a2 <__stack+0x43>
 49e:	82 e0       	ldi	r24, 0x02	; 2
 4a0:	f9 cf       	rjmp	.-14     	; 0x494 <__stack+0x35>
			else if (ButtonState==BUTTON_PID) ButtonState=BUTTON_ADC;
 4a2:	82 30       	cpi	r24, 0x02	; 2
 4a4:	59 f7       	brne	.-42     	; 0x47c <__stack+0x1d>
 4a6:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <ButtonState>
 4aa:	e8 cf       	rjmp	.-48     	; 0x47c <__stack+0x1d>

000004ac <LcdSwitch>:
	//PWM_calc=pid_Controller((int16_t)EncoderValue, (int16_t)ADC_values[0], pid_reg_st);
	
	PT_END(pt);
		
}
PT_THREAD(LcdSwitch(struct pt *pt)) {
 4ac:	cf 93       	push	r28
 4ae:	df 93       	push	r29
 4b0:	00 d0       	rcall	.+0      	; 0x4b2 <LcdSwitch+0x6>
 4b2:	00 d0       	rcall	.+0      	; 0x4b4 <LcdSwitch+0x8>
 4b4:	00 d0       	rcall	.+0      	; 0x4b6 <LcdSwitch+0xa>
 4b6:	cd b7       	in	r28, 0x3d	; 61
 4b8:	de b7       	in	r29, 0x3e	; 62
 4ba:	8d 83       	std	Y+5, r24	; 0x05
 4bc:	9e 83       	std	Y+6, r25	; 0x06
	static volatile uint8_t lcd_switch_timer=0; 
	char * ptr=0;
	uint16_t pid_value=0;
	PT_BEGIN(pt);
 4be:	ed 81       	ldd	r30, Y+5	; 0x05
 4c0:	fe 81       	ldd	r31, Y+6	; 0x06
 4c2:	80 81       	ld	r24, Z
 4c4:	91 81       	ldd	r25, Z+1	; 0x01
 4c6:	00 97       	sbiw	r24, 0x00	; 0
 4c8:	81 f0       	breq	.+32     	; 0x4ea <LcdSwitch+0x3e>
 4ca:	87 97       	sbiw	r24, 0x27	; 39
 4cc:	a1 f0       	breq	.+40     	; 0x4f6 <LcdSwitch+0x4a>
	/*
	Для корректной работы данной реализации ПИДа в режиме П или ПД необходимо сбрасывать накопительную ошибку
	иначе ПИД со временем улетит в оверфлоу
	*/
	lcd_switch_timer=st_millis();
	PT_END(pt);
 4ce:	ed 81       	ldd	r30, Y+5	; 0x05
 4d0:	fe 81       	ldd	r31, Y+6	; 0x06
 4d2:	11 82       	std	Z+1, r1	; 0x01
 4d4:	10 82       	st	Z, r1
 4d6:	83 e0       	ldi	r24, 0x03	; 3
}
 4d8:	26 96       	adiw	r28, 0x06	; 6
 4da:	0f b6       	in	r0, 0x3f	; 63
 4dc:	f8 94       	cli
 4de:	de bf       	out	0x3e, r29	; 62
 4e0:	0f be       	out	0x3f, r0	; 63
 4e2:	cd bf       	out	0x3d, r28	; 61
 4e4:	df 91       	pop	r29
 4e6:	cf 91       	pop	r28
 4e8:	08 95       	ret
	PT_WAIT_UNTIL(pt,(st_millis()-lcd_switch_timer)>=100);
 4ea:	87 e2       	ldi	r24, 0x27	; 39
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	ed 81       	ldd	r30, Y+5	; 0x05
 4f0:	fe 81       	ldd	r31, Y+6	; 0x06
 4f2:	91 83       	std	Z+1, r25	; 0x01
 4f4:	80 83       	st	Z, r24
 4f6:	9b de       	rcall	.-714    	; 0x22e <st_millis>
 4f8:	69 83       	std	Y+1, r22	; 0x01
 4fa:	7a 83       	std	Y+2, r23	; 0x02
 4fc:	8b 83       	std	Y+3, r24	; 0x03
 4fe:	9c 83       	std	Y+4, r25	; 0x04
 500:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <lcd_switch_timer.0>
 504:	29 81       	ldd	r18, Y+1	; 0x01
 506:	3a 81       	ldd	r19, Y+2	; 0x02
 508:	4b 81       	ldd	r20, Y+3	; 0x03
 50a:	5c 81       	ldd	r21, Y+4	; 0x04
 50c:	28 1b       	sub	r18, r24
 50e:	31 09       	sbc	r19, r1
 510:	41 09       	sbc	r20, r1
 512:	51 09       	sbc	r21, r1
 514:	da 01       	movw	r26, r20
 516:	c9 01       	movw	r24, r18
 518:	84 36       	cpi	r24, 0x64	; 100
 51a:	91 05       	cpc	r25, r1
 51c:	a1 05       	cpc	r26, r1
 51e:	b1 05       	cpc	r27, r1
 520:	20 f0       	brcs	.+8      	; 0x52a <LcdSwitch+0x7e>
	lcd_switch_timer=st_millis();
 522:	85 de       	rcall	.-758    	; 0x22e <st_millis>
 524:	60 93 7e 00 	sts	0x007E, r22	; 0x80007e <lcd_switch_timer.0>
 528:	d2 cf       	rjmp	.-92     	; 0x4ce <LcdSwitch+0x22>
	PT_WAIT_UNTIL(pt,(st_millis()-lcd_switch_timer)>=100);
 52a:	80 e0       	ldi	r24, 0x00	; 0
	PT_END(pt);
 52c:	d5 cf       	rjmp	.-86     	; 0x4d8 <LcdSwitch+0x2c>

0000052e <main>:
int main(void)
{
	//volatile uint8_t *ptr;
	//uint8_t noise_level_value=0;
	//initiate ports
	DDRD=255; //all pins on portd are outputs, 7-seg indicator anodes, PD7 - CA1
 52e:	8f ef       	ldi	r24, 0xFF	; 255
 530:	81 bb       	out	0x11, r24	; 17
	DDRB=0b11000111; 
 532:	87 ec       	ldi	r24, 0xC7	; 199
 534:	87 bb       	out	0x17, r24	; 23
	//PB0 - dp (7-seg ), PB1 - PWM, PB2 - Error, PB3 - MOSI(Enc_left), PB4 - MISO (Enc_rigth), PB5 - SCK(Enc_but), PB6 - CA2, PB7 - CA3
	DDRC=0b11110000;//ADC pins inputs
 536:	80 ef       	ldi	r24, 0xF0	; 240
 538:	84 bb       	out	0x14, r24	; 20
	//PA0 - CUR_MON, PA1 - V_MON, PA2 - NTC1, PA3 - NTC2, PA4 - DS_IN_A/LD_PWM_OUT_A, PA5 - DS_IN_B/LD_PWM_OUT_B
	//AREF - 5v, or internal 2.56V
	//DDRA='0b11010000';
	PORTD=0; // Ставим нули на семисегментнике
 53a:	12 ba       	out	0x12, r1	; 18
	PORTB=0b00111000;// Ставим нули на семисегментнике
 53c:	88 e3       	ldi	r24, 0x38	; 56
 53e:	88 bb       	out	0x18, r24	; 24
	PORTC=0;
 540:	15 ba       	out	0x15, r1	; 21
	
	SB(TCCR0, CS02); // инициализируем таймер0, как системный. Set prescaler to 256
 542:	83 b7       	in	r24, 0x33	; 51
 544:	84 60       	ori	r24, 0x04	; 4
 546:	83 bf       	out	0x33, r24	; 51
	TCNT0 = ST_CTC_HANDMADE; //80ms tiks on 2Mhz CPU clock, 2000000/256=7812,5 тиков в секунду. 1/7812,5*10 = 0,00128с = 1.28мс
 548:	85 ef       	ldi	r24, 0xF5	; 245
 54a:	82 bf       	out	0x32, r24	; 50
	SB(TIMSK, TOIE0); // Enable timer0 intterrupt
 54c:	89 b7       	in	r24, 0x39	; 57
 54e:	81 60       	ori	r24, 0x01	; 1
 550:	89 bf       	out	0x39, r24	; 57
	
	TCCR1A=0b10000001; //set timer 1 for PWM переключение oc1A по событие на таймере, oc1b льключен, WGM10=1, 8 бит таймер
 552:	81 e8       	ldi	r24, 0x81	; 129
 554:	8f bd       	out	0x2f, r24	; 47
	TCCR1B=0b00001001; //clocked from CLK=8MHZ WGM12=1
 556:	89 e0       	ldi	r24, 0x09	; 9
 558:	8e bd       	out	0x2e, r24	; 46
	OCR1AH=0;
 55a:	1b bc       	out	0x2b, r1	; 43
	OCR1AL=127;//50% ШИМ 
 55c:	8f e7       	ldi	r24, 0x7F	; 127
 55e:	8a bd       	out	0x2a, r24	; 42
	TCNT1=0;
 560:	1d bc       	out	0x2d, r1	; 45
 562:	1c bc       	out	0x2c, r1	; 44
	TIMSK=0;
 564:	19 be       	out	0x39, r1	; 57
	TIMSK |= _BV(TOIE0) | _BV(OCIE1A);
 566:	89 b7       	in	r24, 0x39	; 57
 568:	81 61       	ori	r24, 0x11	; 17
 56a:	89 bf       	out	0x39, r24	; 57
	//инициализация АЦП
	ADMUX=0b11100000; //опорное напряжение от внутреннего ИОН (2,56V), выравнивание по левому краю (читаем только ADCH), присоединить АЦП к входу ADC0;
 56c:	80 ee       	ldi	r24, 0xE0	; 224
 56e:	87 b9       	out	0x07, r24	; 7
	ADCSRA=0b00001111; //резрешить прерывание от АЦП, Установить делитель частоты 128
 570:	cf e0       	ldi	r28, 0x0F	; 15
 572:	c6 b9       	out	0x06, r28	; 6
	MCUCR|=0b00010000;//установить ADC_noise canceling mode
 574:	85 b7       	in	r24, 0x35	; 53
 576:	80 61       	ori	r24, 0x10	; 16
 578:	85 bf       	out	0x35, r24	; 53
	

	//noise_level_value=ADC_init();
	pid_Init(P_FACTOR,I_FACTOR,D_FACTOR, pid_reg_st);
 57a:	30 e0       	ldi	r19, 0x00	; 0
 57c:	20 e0       	ldi	r18, 0x00	; 0
 57e:	50 e0       	ldi	r21, 0x00	; 0
 580:	40 e0       	ldi	r20, 0x00	; 0
 582:	70 e0       	ldi	r23, 0x00	; 0
 584:	60 e0       	ldi	r22, 0x00	; 0
 586:	82 e0       	ldi	r24, 0x02	; 2
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	2e d0       	rcall	.+92     	; 0x5e8 <pid_Init>
		
	PT_INIT(&SegDyn_pt);
 58c:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <SegDyn_pt+0x1>
 590:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <SegDyn_pt>
	PT_INIT(&EncoderButton_pt);
 594:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <EncoderButton_pt+0x1>
 598:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <EncoderButton_pt>
	PT_INIT(&EncoderScan_pt);
 59c:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <EncoderScan_pt+0x1>
 5a0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <EncoderScan_pt>
	PT_INIT(&Adc_pt);
 5a4:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <Adc_pt+0x1>
 5a8:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <Adc_pt>
	PT_INIT(&LcdSwitch_pt);
 5ac:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <LcdSwitch_pt+0x1>
 5b0:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <LcdSwitch_pt>
	//PT_INIT(&CurrentCalc_pt);
	//PT_INIT(&PID_LD_CURR_pt);
	
	wdt_reset(); //сбрасываем собаку на всякий пожарный
 5b4:	a8 95       	wdr
__attribute__ ((__always_inline__))
void wdt_enable (const uint8_t value)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
		__asm__ __volatile__ (
 5b6:	88 e1       	ldi	r24, 0x18	; 24
 5b8:	0f b6       	in	r0, 0x3f	; 63
 5ba:	f8 94       	cli
 5bc:	a8 95       	wdr
 5be:	81 bd       	out	0x21, r24	; 33
 5c0:	0f be       	out	0x3f, r0	; 63
 5c2:	c1 bd       	out	0x21, r28	; 33
	wdt_enable(WDTO_2S); //запускаем собаку с перидом 2с
	
	sei();
 5c4:	78 94       	sei
	//ADCSRA|=(_BV(7));
	//UDR = ADC_values[0];		// Отправляем байт
	//UCSRB|=(1<<UDRIE);	// Разрешаем прерывание UDRE
    while(1)
    {
		SegDyn(&SegDyn_pt);
 5c6:	87 e8       	ldi	r24, 0x87	; 135
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	39 d0       	rcall	.+114    	; 0x63e <SegDyn>
		EncoderButton(&EncoderButton_pt);
 5cc:	83 e8       	ldi	r24, 0x83	; 131
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	d5 de       	rcall	.-598    	; 0x37c <EncoderButton>
		EncoderScan(&EncoderScan_pt);
 5d2:	85 e8       	ldi	r24, 0x85	; 133
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	4b de       	rcall	.-874    	; 0x26e <EncoderScan>
		Adc(&Adc_pt);
 5d8:	81 e8       	ldi	r24, 0x81	; 129
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	7c dd       	rcall	.-1288   	; 0xd6 <Adc>
		LcdSwitch(&LcdSwitch_pt);
 5de:	8f e7       	ldi	r24, 0x7F	; 127
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	64 df       	rcall	.-312    	; 0x4ac <LcdSwitch>
		wdt_reset(); //переодически сбрасываем собаку чтобы не улетететь в ресет
 5e4:	a8 95       	wdr
    while(1)
 5e6:	ef cf       	rjmp	.-34     	; 0x5c6 <main+0x98>

000005e8 <pid_Init>:
 *  \param d_factor  Derivate term.
 *  \param pid  Struct with PID status.
 */
void pid_Init(int16_t p_factor, int16_t i_factor, int16_t d_factor, struct PID_DATA *pid)
// Set up PID controller parameters
{
 5e8:	cf 93       	push	r28
 5ea:	df 93       	push	r29
 5ec:	fb 01       	movw	r30, r22
 5ee:	e9 01       	movw	r28, r18
  // Start values for PID controller
  pid->sumError = 0;
 5f0:	1a 82       	std	Y+2, r1	; 0x02
 5f2:	1b 82       	std	Y+3, r1	; 0x03
 5f4:	1c 82       	std	Y+4, r1	; 0x04
 5f6:	1d 82       	std	Y+5, r1	; 0x05
  pid->lastProcessValue = 0;
 5f8:	19 82       	std	Y+1, r1	; 0x01
 5fa:	18 82       	st	Y, r1
  // Tuning constants for PID loop
  pid->P_Factor = p_factor;
 5fc:	9f 83       	std	Y+7, r25	; 0x07
 5fe:	8e 83       	std	Y+6, r24	; 0x06
  pid->I_Factor = i_factor;
 600:	79 87       	std	Y+9, r23	; 0x09
 602:	68 87       	std	Y+8, r22	; 0x08
  pid->D_Factor = d_factor;
 604:	5b 87       	std	Y+11, r21	; 0x0b
 606:	4a 87       	std	Y+10, r20	; 0x0a
  // Limits to avoid overflow
  pid->maxError = MAX_INT / (pid->P_Factor + 1);
 608:	bc 01       	movw	r22, r24
 60a:	6f 5f       	subi	r22, 0xFF	; 255
 60c:	7f 4f       	sbci	r23, 0xFF	; 255
 60e:	8f ef       	ldi	r24, 0xFF	; 255
 610:	9f e7       	ldi	r25, 0x7F	; 127
 612:	ab d0       	rcall	.+342    	; 0x76a <__divmodhi4>
 614:	7d 87       	std	Y+13, r23	; 0x0d
 616:	6c 87       	std	Y+12, r22	; 0x0c
  pid->maxSumError = MAX_I_TERM / (pid->I_Factor + 1);
 618:	9f 01       	movw	r18, r30
 61a:	2f 5f       	subi	r18, 0xFF	; 255
 61c:	3f 4f       	sbci	r19, 0xFF	; 255
 61e:	03 2e       	mov	r0, r19
 620:	00 0c       	add	r0, r0
 622:	44 0b       	sbc	r20, r20
 624:	55 0b       	sbc	r21, r21
 626:	6f ef       	ldi	r22, 0xFF	; 255
 628:	7f ef       	ldi	r23, 0xFF	; 255
 62a:	8f ef       	ldi	r24, 0xFF	; 255
 62c:	9f e3       	ldi	r25, 0x3F	; 63
 62e:	b0 d0       	rcall	.+352    	; 0x790 <__divmodsi4>
 630:	2e 87       	std	Y+14, r18	; 0x0e
 632:	3f 87       	std	Y+15, r19	; 0x0f
 634:	48 8b       	std	Y+16, r20	; 0x10
 636:	59 8b       	std	Y+17, r21	; 0x11
}
 638:	df 91       	pop	r29
 63a:	cf 91       	pop	r28
 63c:	08 95       	ret

0000063e <SegDyn>:
inline static struct divmod10_t divmodu10(uint32_t n);
const uint8_t digits[] PROGMEM = {d_0,d_1,d_2,d_3,d_4,d_5,d_6,d_7,d_8,d_9};
static uint8_t digit(uint8_t d) {
	return pgm_read_byte(&digits[d]);	
}
PT_THREAD(SegDyn(struct pt *pt)) {
 63e:	0f 93       	push	r16
 640:	1f 93       	push	r17
 642:	cf 93       	push	r28
 644:	df 93       	push	r29
 646:	00 d0       	rcall	.+0      	; 0x648 <SegDyn+0xa>
 648:	00 d0       	rcall	.+0      	; 0x64a <SegDyn+0xc>
 64a:	0f 92       	push	r0
 64c:	cd b7       	in	r28, 0x3d	; 61
 64e:	de b7       	in	r29, 0x3e	; 62
 650:	8c 01       	movw	r16, r24
	static volatile uint32_t last_timer=0;
	uint8_t cathode=0;
	PT_BEGIN(pt);
 652:	fc 01       	movw	r30, r24
 654:	80 81       	ld	r24, Z
 656:	91 81       	ldd	r25, Z+1	; 0x01
 658:	82 31       	cpi	r24, 0x12	; 18
 65a:	91 05       	cpc	r25, r1
 65c:	99 f1       	breq	.+102    	; 0x6c4 <SegDyn+0x86>
 65e:	88 31       	cpi	r24, 0x18	; 24
 660:	91 05       	cpc	r25, r1
 662:	09 f4       	brne	.+2      	; 0x666 <SegDyn+0x28>
 664:	77 c0       	rjmp	.+238    	; 0x754 <SegDyn+0x116>
 666:	89 2b       	or	r24, r25
 668:	09 f0       	breq	.+2      	; 0x66c <SegDyn+0x2e>
 66a:	6f c0       	rjmp	.+222    	; 0x74a <SegDyn+0x10c>
 66c:	1d 82       	std	Y+5, r1	; 0x05
	while (cathode<SCR_SIZE) {
		PT_WAIT_UNTIL(pt, (st_millis()-last_timer)>=5);
 66e:	82 e1       	ldi	r24, 0x12	; 18
 670:	90 e0       	ldi	r25, 0x00	; 0
 672:	f8 01       	movw	r30, r16
 674:	91 83       	std	Z+1, r25	; 0x01
 676:	80 83       	st	Z, r24
 678:	da dd       	rcall	.-1100   	; 0x22e <st_millis>
 67a:	69 83       	std	Y+1, r22	; 0x01
 67c:	7a 83       	std	Y+2, r23	; 0x02
 67e:	8b 83       	std	Y+3, r24	; 0x03
 680:	9c 83       	std	Y+4, r25	; 0x04
 682:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <last_timer.0>
 686:	90 91 8a 00 	lds	r25, 0x008A	; 0x80008a <last_timer.0+0x1>
 68a:	a0 91 8b 00 	lds	r26, 0x008B	; 0x80008b <last_timer.0+0x2>
 68e:	b0 91 8c 00 	lds	r27, 0x008C	; 0x80008c <last_timer.0+0x3>
 692:	29 81       	ldd	r18, Y+1	; 0x01
 694:	3a 81       	ldd	r19, Y+2	; 0x02
 696:	4b 81       	ldd	r20, Y+3	; 0x03
 698:	5c 81       	ldd	r21, Y+4	; 0x04
 69a:	28 1b       	sub	r18, r24
 69c:	39 0b       	sbc	r19, r25
 69e:	4a 0b       	sbc	r20, r26
 6a0:	5b 0b       	sbc	r21, r27
 6a2:	da 01       	movw	r26, r20
 6a4:	c9 01       	movw	r24, r18
 6a6:	05 97       	sbiw	r24, 0x05	; 5
 6a8:	a1 05       	cpc	r26, r1
 6aa:	b1 05       	cpc	r27, r1
 6ac:	68 f4       	brcc	.+26     	; 0x6c8 <SegDyn+0x8a>
 6ae:	80 e0       	ldi	r24, 0x00	; 0
		if (cathode==2) LCD_PORT_2|=(_BV(7));
		//LCD_PORT_1|=(digit((uint8_t)SCR_D[cathode]));
		cathode++;
	}
	PT_END(pt);
}
 6b0:	0f 90       	pop	r0
 6b2:	0f 90       	pop	r0
 6b4:	0f 90       	pop	r0
 6b6:	0f 90       	pop	r0
 6b8:	0f 90       	pop	r0
 6ba:	df 91       	pop	r29
 6bc:	cf 91       	pop	r28
 6be:	1f 91       	pop	r17
 6c0:	0f 91       	pop	r16
 6c2:	08 95       	ret
	PT_BEGIN(pt);
 6c4:	1d 82       	std	Y+5, r1	; 0x05
 6c6:	d8 cf       	rjmp	.-80     	; 0x678 <SegDyn+0x3a>
		last_timer = st_millis();
 6c8:	b2 dd       	rcall	.-1180   	; 0x22e <st_millis>
 6ca:	46 2f       	mov	r20, r22
 6cc:	57 2f       	mov	r21, r23
 6ce:	bc 01       	movw	r22, r24
 6d0:	40 93 89 00 	sts	0x0089, r20	; 0x800089 <last_timer.0>
 6d4:	50 93 8a 00 	sts	0x008A, r21	; 0x80008a <last_timer.0+0x1>
 6d8:	60 93 8b 00 	sts	0x008B, r22	; 0x80008b <last_timer.0+0x2>
 6dc:	70 93 8c 00 	sts	0x008C, r23	; 0x80008c <last_timer.0+0x3>
		LCD_PORT_1 = 0;//segments off, CC0 off
 6e0:	12 ba       	out	0x12, r1	; 18
		LCD_PORT_2 &= CC2_CC3_MASK;
 6e2:	88 b3       	in	r24, 0x18	; 24
 6e4:	80 7c       	andi	r24, 0xC0	; 192
 6e6:	88 bb       	out	0x18, r24	; 24
		PT_WAIT_UNTIL(pt, (st_millis()-last_timer) >= 1); //задержка после погашения индикаторов
 6e8:	88 e1       	ldi	r24, 0x18	; 24
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	f8 01       	movw	r30, r16
 6ee:	91 83       	std	Z+1, r25	; 0x01
 6f0:	80 83       	st	Z, r24
 6f2:	9d dd       	rcall	.-1222   	; 0x22e <st_millis>
 6f4:	69 83       	std	Y+1, r22	; 0x01
 6f6:	7a 83       	std	Y+2, r23	; 0x02
 6f8:	8b 83       	std	Y+3, r24	; 0x03
 6fa:	9c 83       	std	Y+4, r25	; 0x04
 6fc:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <last_timer.0>
 700:	90 91 8a 00 	lds	r25, 0x008A	; 0x80008a <last_timer.0+0x1>
 704:	a0 91 8b 00 	lds	r26, 0x008B	; 0x80008b <last_timer.0+0x2>
 708:	b0 91 8c 00 	lds	r27, 0x008C	; 0x80008c <last_timer.0+0x3>
 70c:	29 81       	ldd	r18, Y+1	; 0x01
 70e:	3a 81       	ldd	r19, Y+2	; 0x02
 710:	4b 81       	ldd	r20, Y+3	; 0x03
 712:	5c 81       	ldd	r21, Y+4	; 0x04
 714:	28 17       	cp	r18, r24
 716:	39 07       	cpc	r19, r25
 718:	4a 07       	cpc	r20, r26
 71a:	5b 07       	cpc	r21, r27
 71c:	41 f2       	breq	.-112    	; 0x6ae <SegDyn+0x70>
		LCD_PORT_1 |= (digit((uint8_t)SCR_D[cathode]));
 71e:	3d 81       	ldd	r19, Y+5	; 0x05
 720:	e3 2f       	mov	r30, r19
 722:	f0 e0       	ldi	r31, 0x00	; 0
 724:	e3 57       	subi	r30, 0x73	; 115
 726:	ff 4f       	sbci	r31, 0xFF	; 255
	return pgm_read_byte(&digits[d]);	
 728:	e0 81       	ld	r30, Z
 72a:	f0 e0       	ldi	r31, 0x00	; 0
 72c:	ea 5c       	subi	r30, 0xCA	; 202
 72e:	ff 4f       	sbci	r31, 0xFF	; 255
 730:	e4 91       	lpm	r30, Z
		LCD_PORT_1 |= (digit((uint8_t)SCR_D[cathode]));
 732:	82 b3       	in	r24, 0x12	; 18
 734:	8e 2b       	or	r24, r30
 736:	82 bb       	out	0x12, r24	; 18
		if (cathode==0) LCD_PORT_1|=(_BV(7));
 738:	31 11       	cpse	r19, r1
 73a:	0e c0       	rjmp	.+28     	; 0x758 <SegDyn+0x11a>
 73c:	97 9a       	sbi	0x12, 7	; 18
		cathode++;
 73e:	5d 81       	ldd	r21, Y+5	; 0x05
 740:	5f 5f       	subi	r21, 0xFF	; 255
 742:	5d 83       	std	Y+5, r21	; 0x05
	while (cathode<SCR_SIZE) {
 744:	53 30       	cpi	r21, 0x03	; 3
 746:	09 f0       	breq	.+2      	; 0x74a <SegDyn+0x10c>
 748:	92 cf       	rjmp	.-220    	; 0x66e <SegDyn+0x30>
	PT_END(pt);
 74a:	f8 01       	movw	r30, r16
 74c:	11 82       	std	Z+1, r1	; 0x01
 74e:	10 82       	st	Z, r1
 750:	83 e0       	ldi	r24, 0x03	; 3
 752:	ae cf       	rjmp	.-164    	; 0x6b0 <SegDyn+0x72>
	PT_BEGIN(pt);
 754:	1d 82       	std	Y+5, r1	; 0x05
 756:	cd cf       	rjmp	.-102    	; 0x6f2 <SegDyn+0xb4>
		if (cathode==1) LCD_PORT_2|=(_BV(6));
 758:	4d 81       	ldd	r20, Y+5	; 0x05
 75a:	41 30       	cpi	r20, 0x01	; 1
 75c:	21 f0       	breq	.+8      	; 0x766 <SegDyn+0x128>
		if (cathode==2) LCD_PORT_2|=(_BV(7));
 75e:	42 30       	cpi	r20, 0x02	; 2
 760:	71 f7       	brne	.-36     	; 0x73e <SegDyn+0x100>
 762:	c7 9a       	sbi	0x18, 7	; 24
 764:	ec cf       	rjmp	.-40     	; 0x73e <SegDyn+0x100>
		if (cathode==1) LCD_PORT_2|=(_BV(6));
 766:	c6 9a       	sbi	0x18, 6	; 24
		if (cathode==2) LCD_PORT_2|=(_BV(7));
 768:	ea cf       	rjmp	.-44     	; 0x73e <SegDyn+0x100>

0000076a <__divmodhi4>:
 76a:	97 fb       	bst	r25, 7
 76c:	07 2e       	mov	r0, r23
 76e:	16 f4       	brtc	.+4      	; 0x774 <__divmodhi4+0xa>
 770:	00 94       	com	r0
 772:	06 d0       	rcall	.+12     	; 0x780 <__divmodhi4_neg1>
 774:	77 fd       	sbrc	r23, 7
 776:	08 d0       	rcall	.+16     	; 0x788 <__divmodhi4_neg2>
 778:	27 d0       	rcall	.+78     	; 0x7c8 <__udivmodhi4>
 77a:	07 fc       	sbrc	r0, 7
 77c:	05 d0       	rcall	.+10     	; 0x788 <__divmodhi4_neg2>
 77e:	3e f4       	brtc	.+14     	; 0x78e <__divmodhi4_exit>

00000780 <__divmodhi4_neg1>:
 780:	90 95       	com	r25
 782:	81 95       	neg	r24
 784:	9f 4f       	sbci	r25, 0xFF	; 255
 786:	08 95       	ret

00000788 <__divmodhi4_neg2>:
 788:	70 95       	com	r23
 78a:	61 95       	neg	r22
 78c:	7f 4f       	sbci	r23, 0xFF	; 255

0000078e <__divmodhi4_exit>:
 78e:	08 95       	ret

00000790 <__divmodsi4>:
 790:	05 2e       	mov	r0, r21
 792:	97 fb       	bst	r25, 7
 794:	16 f4       	brtc	.+4      	; 0x79a <__divmodsi4+0xa>
 796:	00 94       	com	r0
 798:	0f d0       	rcall	.+30     	; 0x7b8 <__negsi2>
 79a:	57 fd       	sbrc	r21, 7
 79c:	05 d0       	rcall	.+10     	; 0x7a8 <__divmodsi4_neg2>
 79e:	28 d0       	rcall	.+80     	; 0x7f0 <__udivmodsi4>
 7a0:	07 fc       	sbrc	r0, 7
 7a2:	02 d0       	rcall	.+4      	; 0x7a8 <__divmodsi4_neg2>
 7a4:	46 f4       	brtc	.+16     	; 0x7b6 <__divmodsi4_exit>
 7a6:	08 c0       	rjmp	.+16     	; 0x7b8 <__negsi2>

000007a8 <__divmodsi4_neg2>:
 7a8:	50 95       	com	r21
 7aa:	40 95       	com	r20
 7ac:	30 95       	com	r19
 7ae:	21 95       	neg	r18
 7b0:	3f 4f       	sbci	r19, 0xFF	; 255
 7b2:	4f 4f       	sbci	r20, 0xFF	; 255
 7b4:	5f 4f       	sbci	r21, 0xFF	; 255

000007b6 <__divmodsi4_exit>:
 7b6:	08 95       	ret

000007b8 <__negsi2>:
 7b8:	90 95       	com	r25
 7ba:	80 95       	com	r24
 7bc:	70 95       	com	r23
 7be:	61 95       	neg	r22
 7c0:	7f 4f       	sbci	r23, 0xFF	; 255
 7c2:	8f 4f       	sbci	r24, 0xFF	; 255
 7c4:	9f 4f       	sbci	r25, 0xFF	; 255
 7c6:	08 95       	ret

000007c8 <__udivmodhi4>:
 7c8:	aa 1b       	sub	r26, r26
 7ca:	bb 1b       	sub	r27, r27
 7cc:	51 e1       	ldi	r21, 0x11	; 17
 7ce:	07 c0       	rjmp	.+14     	; 0x7de <__udivmodhi4_ep>

000007d0 <__udivmodhi4_loop>:
 7d0:	aa 1f       	adc	r26, r26
 7d2:	bb 1f       	adc	r27, r27
 7d4:	a6 17       	cp	r26, r22
 7d6:	b7 07       	cpc	r27, r23
 7d8:	10 f0       	brcs	.+4      	; 0x7de <__udivmodhi4_ep>
 7da:	a6 1b       	sub	r26, r22
 7dc:	b7 0b       	sbc	r27, r23

000007de <__udivmodhi4_ep>:
 7de:	88 1f       	adc	r24, r24
 7e0:	99 1f       	adc	r25, r25
 7e2:	5a 95       	dec	r21
 7e4:	a9 f7       	brne	.-22     	; 0x7d0 <__udivmodhi4_loop>
 7e6:	80 95       	com	r24
 7e8:	90 95       	com	r25
 7ea:	bc 01       	movw	r22, r24
 7ec:	cd 01       	movw	r24, r26
 7ee:	08 95       	ret

000007f0 <__udivmodsi4>:
 7f0:	a1 e2       	ldi	r26, 0x21	; 33
 7f2:	1a 2e       	mov	r1, r26
 7f4:	aa 1b       	sub	r26, r26
 7f6:	bb 1b       	sub	r27, r27
 7f8:	fd 01       	movw	r30, r26
 7fa:	0d c0       	rjmp	.+26     	; 0x816 <__udivmodsi4_ep>

000007fc <__udivmodsi4_loop>:
 7fc:	aa 1f       	adc	r26, r26
 7fe:	bb 1f       	adc	r27, r27
 800:	ee 1f       	adc	r30, r30
 802:	ff 1f       	adc	r31, r31
 804:	a2 17       	cp	r26, r18
 806:	b3 07       	cpc	r27, r19
 808:	e4 07       	cpc	r30, r20
 80a:	f5 07       	cpc	r31, r21
 80c:	20 f0       	brcs	.+8      	; 0x816 <__udivmodsi4_ep>
 80e:	a2 1b       	sub	r26, r18
 810:	b3 0b       	sbc	r27, r19
 812:	e4 0b       	sbc	r30, r20
 814:	f5 0b       	sbc	r31, r21

00000816 <__udivmodsi4_ep>:
 816:	66 1f       	adc	r22, r22
 818:	77 1f       	adc	r23, r23
 81a:	88 1f       	adc	r24, r24
 81c:	99 1f       	adc	r25, r25
 81e:	1a 94       	dec	r1
 820:	69 f7       	brne	.-38     	; 0x7fc <__udivmodsi4_loop>
 822:	60 95       	com	r22
 824:	70 95       	com	r23
 826:	80 95       	com	r24
 828:	90 95       	com	r25
 82a:	9b 01       	movw	r18, r22
 82c:	ac 01       	movw	r20, r24
 82e:	bd 01       	movw	r22, r26
 830:	cf 01       	movw	r24, r30
 832:	08 95       	ret

00000834 <_exit>:
 834:	f8 94       	cli

00000836 <__stop_program>:
 836:	ff cf       	rjmp	.-2      	; 0x836 <__stop_program>
