
LD_TEC_PS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000002d6  0000036a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  00800060  00800060  0000036a  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  0000036c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000a38  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000acf  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000098  00000000  00000000  00000afe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000081a  00000000  00000000  00000b96  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000550  00000000  00000000  000013b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000057e  00000000  00000000  00001900  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000134  00000000  00000000  00001e80  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000249  00000000  00000000  00001fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000059d  00000000  00000000  000021fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000070  00000000  00000000  0000279a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	1f c0       	rjmp	.+62     	; 0x40 <__ctors_end>
   2:	2e c0       	rjmp	.+92     	; 0x60 <__bad_interrupt>
   4:	2d c0       	rjmp	.+90     	; 0x60 <__bad_interrupt>
   6:	2c c0       	rjmp	.+88     	; 0x60 <__bad_interrupt>
   8:	2b c0       	rjmp	.+86     	; 0x60 <__bad_interrupt>
   a:	2a c0       	rjmp	.+84     	; 0x60 <__bad_interrupt>
   c:	29 c0       	rjmp	.+82     	; 0x60 <__bad_interrupt>
   e:	28 c0       	rjmp	.+80     	; 0x60 <__bad_interrupt>
  10:	27 c0       	rjmp	.+78     	; 0x60 <__bad_interrupt>
  12:	24 c1       	rjmp	.+584    	; 0x25c <__vector_9>
  14:	25 c0       	rjmp	.+74     	; 0x60 <__bad_interrupt>
  16:	24 c0       	rjmp	.+72     	; 0x60 <__bad_interrupt>
  18:	23 c0       	rjmp	.+70     	; 0x60 <__bad_interrupt>
  1a:	22 c0       	rjmp	.+68     	; 0x60 <__bad_interrupt>
  1c:	21 c0       	rjmp	.+66     	; 0x60 <__bad_interrupt>
  1e:	20 c0       	rjmp	.+64     	; 0x60 <__bad_interrupt>
  20:	1f c0       	rjmp	.+62     	; 0x60 <__bad_interrupt>
  22:	1e c0       	rjmp	.+60     	; 0x60 <__bad_interrupt>
  24:	1d c0       	rjmp	.+58     	; 0x60 <__bad_interrupt>

00000026 <EncState>:
  26:	00 ff 01 00 01 00 00 ff ff 00 00 01 00 01 ff 00     ................

00000036 <digits>:
  36:	3f 0c 5b 5e 6c 76 77 1c 7f 7e                       ?.[^lvw..~

00000040 <__ctors_end>:
  40:	11 24       	eor	r1, r1
  42:	1f be       	out	0x3f, r1	; 63
  44:	cf e5       	ldi	r28, 0x5F	; 95
  46:	d4 e0       	ldi	r29, 0x04	; 4
  48:	de bf       	out	0x3e, r29	; 62
  4a:	cd bf       	out	0x3d, r28	; 61

0000004c <__do_clear_bss>:
  4c:	20 e0       	ldi	r18, 0x00	; 0
  4e:	a0 e6       	ldi	r26, 0x60	; 96
  50:	b0 e0       	ldi	r27, 0x00	; 0
  52:	01 c0       	rjmp	.+2      	; 0x56 <.do_clear_bss_start>

00000054 <.do_clear_bss_loop>:
  54:	1d 92       	st	X+, r1

00000056 <.do_clear_bss_start>:
  56:	aa 37       	cpi	r26, 0x7A	; 122
  58:	b2 07       	cpc	r27, r18
  5a:	e1 f7       	brne	.-8      	; 0x54 <.do_clear_bss_loop>
  5c:	c0 d0       	rcall	.+384    	; 0x1de <main>
  5e:	39 c1       	rjmp	.+626    	; 0x2d2 <_exit>

00000060 <__bad_interrupt>:
  60:	cf cf       	rjmp	.-98     	; 0x0 <__vectors>

00000062 <EncoderScan>:
const	int8_t	EncState[] PROGMEM =
{
	0, -1, 1, 0, 1, 0, 0, -1, -1, 0, 0, 1, 0, 1, -1, 0
};
PT_THREAD(EncoderScan(struct pt *pt))
{
  62:	0f 93       	push	r16
  64:	1f 93       	push	r17
  66:	cf 93       	push	r28
  68:	df 93       	push	r29
  6a:	ec 01       	movw	r28, r24
	static	uint16_t	EncVal=0;
	static	uint8_t	Enc=0;
	static uint8_t enc_timer=0;
	
	PT_BEGIN(pt);
  6c:	88 81       	ld	r24, Y
  6e:	99 81       	ldd	r25, Y+1	; 0x01
  70:	00 97       	sbiw	r24, 0x00	; 0
  72:	21 f0       	breq	.+8      	; 0x7c <EncoderScan+0x1a>
  74:	47 97       	sbiw	r24, 0x17	; 23
  76:	09 f0       	breq	.+2      	; 0x7a <EncoderScan+0x18>
  78:	3e c0       	rjmp	.+124    	; 0xf6 <EncoderScan+0x94>
  7a:	04 c0       	rjmp	.+8      	; 0x84 <EncoderScan+0x22>
	PT_WAIT_UNTIL(pt, (st_millis()-enc_timer)>=1);
  7c:	87 e1       	ldi	r24, 0x17	; 23
  7e:	90 e0       	ldi	r25, 0x00	; 0
  80:	99 83       	std	Y+1, r25	; 0x01
  82:	88 83       	st	Y, r24
  84:	12 d1       	rcall	.+548    	; 0x2aa <st_millis>
  86:	40 91 62 00 	lds	r20, 0x0062
  8a:	04 2f       	mov	r16, r20
  8c:	10 e0       	ldi	r17, 0x00	; 0
  8e:	20 e0       	ldi	r18, 0x00	; 0
  90:	30 e0       	ldi	r19, 0x00	; 0
  92:	60 17       	cp	r22, r16
  94:	71 07       	cpc	r23, r17
  96:	82 07       	cpc	r24, r18
  98:	93 07       	cpc	r25, r19
  9a:	89 f1       	breq	.+98     	; 0xfe <EncoderScan+0x9c>
	enc_timer=st_millis();
  9c:	06 d1       	rcall	.+524    	; 0x2aa <st_millis>
  9e:	60 93 62 00 	sts	0x0062, r22
	Enc += PIN(ENCPOLL_PORT) & ((1<<ENCPOLL_A_PIN)|(1<<ENCPOLL_B_PIN));
  a2:	26 b3       	in	r18, 0x16	; 22
  a4:	28 71       	andi	r18, 0x18	; 24
  a6:	80 91 63 00 	lds	r24, 0x0063
  aa:	28 0f       	add	r18, r24
	EncVal += (uint16_t)pgm_read_byte(&(EncState[Enc]));
  ac:	e2 2f       	mov	r30, r18
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	ea 5d       	subi	r30, 0xDA	; 218
  b2:	ff 4f       	sbci	r31, 0xFF	; 255
  b4:	e4 91       	lpm	r30, Z
  b6:	80 91 64 00 	lds	r24, 0x0064
  ba:	90 91 65 00 	lds	r25, 0x0065
  be:	8e 0f       	add	r24, r30
  c0:	91 1d       	adc	r25, r1
  c2:	90 93 65 00 	sts	0x0065, r25
  c6:	80 93 64 00 	sts	0x0064, r24
	Enc <<= 2;
  ca:	22 0f       	add	r18, r18
  cc:	22 0f       	add	r18, r18
	Enc &= 0b00001111;
  ce:	2f 70       	andi	r18, 0x0F	; 15
  d0:	20 93 63 00 	sts	0x0063, r18
	
	//if (EncVal > 0xfe) EncVal = 0;
	if (EncVal > 600) EncVal = 600; //600 = 6A current
  d4:	89 35       	cpi	r24, 0x59	; 89
  d6:	92 40       	sbci	r25, 0x02	; 2
  d8:	30 f0       	brcs	.+12     	; 0xe6 <EncoderScan+0x84>
  da:	88 e5       	ldi	r24, 0x58	; 88
  dc:	92 e0       	ldi	r25, 0x02	; 2
  de:	90 93 65 00 	sts	0x0065, r25
  e2:	80 93 64 00 	sts	0x0064, r24
	
	EncoderValue=EncVal;
  e6:	80 91 64 00 	lds	r24, 0x0064
  ea:	90 91 65 00 	lds	r25, 0x0065
  ee:	90 93 61 00 	sts	0x0061, r25
  f2:	80 93 60 00 	sts	0x0060, r24
	
	PT_END(pt);
  f6:	19 82       	std	Y+1, r1	; 0x01
  f8:	18 82       	st	Y, r1
  fa:	83 e0       	ldi	r24, 0x03	; 3
  fc:	01 c0       	rjmp	.+2      	; 0x100 <EncoderScan+0x9e>
	static	uint16_t	EncVal=0;
	static	uint8_t	Enc=0;
	static uint8_t enc_timer=0;
	
	PT_BEGIN(pt);
	PT_WAIT_UNTIL(pt, (st_millis()-enc_timer)>=1);
  fe:	80 e0       	ldi	r24, 0x00	; 0
	if (EncVal > 600) EncVal = 600; //600 = 6A current
	
	EncoderValue=EncVal;
	
	PT_END(pt);
}
 100:	df 91       	pop	r29
 102:	cf 91       	pop	r28
 104:	1f 91       	pop	r17
 106:	0f 91       	pop	r16
 108:	08 95       	ret

0000010a <SegDyn>:
{
	return pgm_read_byte(&digits[d]);	
}
	
PT_THREAD(SegDyn(struct pt *pt))
{
 10a:	0f 93       	push	r16
 10c:	1f 93       	push	r17
 10e:	cf 93       	push	r28
 110:	df 93       	push	r29
 112:	ec 01       	movw	r28, r24
	static volatile uint32_t last_timer=0;
	static volatile uint8_t cathode=0;
	
	PT_BEGIN(pt);
 114:	88 81       	ld	r24, Y
 116:	99 81       	ldd	r25, Y+1	; 0x01
 118:	00 97       	sbiw	r24, 0x00	; 0
 11a:	09 f4       	brne	.+2      	; 0x11e <SegDyn+0x14>
 11c:	48 c0       	rjmp	.+144    	; 0x1ae <SegDyn+0xa4>
 11e:	87 97       	sbiw	r24, 0x27	; 39
 120:	09 f0       	breq	.+2      	; 0x124 <SegDyn+0x1a>
 122:	4c c0       	rjmp	.+152    	; 0x1bc <SegDyn+0xb2>
 124:	04 c0       	rjmp	.+8      	; 0x12e <SegDyn+0x24>
	while (cathode<=SCR_SIZE-1)
	{
		PT_WAIT_UNTIL(pt, (st_millis()-last_timer)>=5);
 126:	87 e2       	ldi	r24, 0x27	; 39
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	99 83       	std	Y+1, r25	; 0x01
 12c:	88 83       	st	Y, r24
 12e:	bd d0       	rcall	.+378    	; 0x2aa <st_millis>
 130:	00 91 67 00 	lds	r16, 0x0067
 134:	10 91 68 00 	lds	r17, 0x0068
 138:	20 91 69 00 	lds	r18, 0x0069
 13c:	30 91 6a 00 	lds	r19, 0x006A
 140:	ab 01       	movw	r20, r22
 142:	bc 01       	movw	r22, r24
 144:	40 1b       	sub	r20, r16
 146:	51 0b       	sbc	r21, r17
 148:	62 0b       	sbc	r22, r18
 14a:	73 0b       	sbc	r23, r19
 14c:	45 30       	cpi	r20, 0x05	; 5
 14e:	51 05       	cpc	r21, r1
 150:	61 05       	cpc	r22, r1
 152:	71 05       	cpc	r23, r1
 154:	b8 f1       	brcs	.+110    	; 0x1c4 <SegDyn+0xba>
		last_timer=st_millis();
 156:	a9 d0       	rcall	.+338    	; 0x2aa <st_millis>
 158:	60 93 67 00 	sts	0x0067, r22
 15c:	70 93 68 00 	sts	0x0068, r23
 160:	80 93 69 00 	sts	0x0069, r24
 164:	90 93 6a 00 	sts	0x006A, r25
		LCD_PORT_1&=~(_BV(7)); //CC1 off
 168:	97 98       	cbi	0x12, 7	; 18
		LCD_PORT_2&=~(_BV(6)); //CC2, CC3 off (установить нули надо)
 16a:	c6 98       	cbi	0x18, 6	; 24
		LCD_PORT_2&=~(_BV(7));
 16c:	c7 98       	cbi	0x18, 7	; 24
		//PT_WAIT_UNTIL(pt,1);
		//зажигаем цифру
		LCD_PORT_1=((digit(SCR_D[cathode]))&(~(_BV(7)))); //возможно гасит первую цифру или включает постоянно, не должно
 16e:	e0 91 66 00 	lds	r30, 0x0066
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	e9 58       	subi	r30, 0x89	; 137
 176:	ff 4f       	sbci	r31, 0xFF	; 255
 178:	e0 81       	ld	r30, Z
extern volatile uint8_t SCR_D[SCR_SIZE];
/// массив символов-цифр
const uint8_t digits[] PROGMEM = {d_0,d_1,d_2,d_3,d_4,d_5,d_6,d_7,d_8,d_9};
static uint8_t digit(uint8_t d) 
{
	return pgm_read_byte(&digits[d]);	
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	ea 5c       	subi	r30, 0xCA	; 202
 17e:	ff 4f       	sbci	r31, 0xFF	; 255
 180:	e4 91       	lpm	r30, Z
		LCD_PORT_1&=~(_BV(7)); //CC1 off
		LCD_PORT_2&=~(_BV(6)); //CC2, CC3 off (установить нули надо)
		LCD_PORT_2&=~(_BV(7));
		//PT_WAIT_UNTIL(pt,1);
		//зажигаем цифру
		LCD_PORT_1=((digit(SCR_D[cathode]))&(~(_BV(7)))); //возможно гасит первую цифру или включает постоянно, не должно
 182:	ef 77       	andi	r30, 0x7F	; 127
 184:	e2 bb       	out	0x12, r30	; 18
		//Здесь плохо написано, костыль, связанный с дебильной разводкой
		if (cathode==0) LCD_PORT_1|=(_BV(7));
 186:	80 91 66 00 	lds	r24, 0x0066
 18a:	81 11       	cpse	r24, r1
 18c:	01 c0       	rjmp	.+2      	; 0x190 <SegDyn+0x86>
 18e:	97 9a       	sbi	0x12, 7	; 18
		if (cathode==1) LCD_PORT_2|=(_BV(6));
 190:	80 91 66 00 	lds	r24, 0x0066
 194:	81 30       	cpi	r24, 0x01	; 1
 196:	09 f4       	brne	.+2      	; 0x19a <SegDyn+0x90>
 198:	c6 9a       	sbi	0x18, 6	; 24
		if (cathode==2) LCD_PORT_2|=(_BV(7));
 19a:	80 91 66 00 	lds	r24, 0x0066
 19e:	82 30       	cpi	r24, 0x02	; 2
 1a0:	09 f4       	brne	.+2      	; 0x1a4 <SegDyn+0x9a>
 1a2:	c7 9a       	sbi	0x18, 7	; 24
		cathode++;
 1a4:	80 91 66 00 	lds	r24, 0x0066
 1a8:	8f 5f       	subi	r24, 0xFF	; 255
 1aa:	80 93 66 00 	sts	0x0066, r24
{
	static volatile uint32_t last_timer=0;
	static volatile uint8_t cathode=0;
	
	PT_BEGIN(pt);
	while (cathode<=SCR_SIZE-1)
 1ae:	80 91 66 00 	lds	r24, 0x0066
 1b2:	83 30       	cpi	r24, 0x03	; 3
 1b4:	08 f4       	brcc	.+2      	; 0x1b8 <SegDyn+0xae>
 1b6:	b7 cf       	rjmp	.-146    	; 0x126 <SegDyn+0x1c>
		if (cathode==0) LCD_PORT_1|=(_BV(7));
		if (cathode==1) LCD_PORT_2|=(_BV(6));
		if (cathode==2) LCD_PORT_2|=(_BV(7));
		cathode++;
	}
	cathode=0;
 1b8:	10 92 66 00 	sts	0x0066, r1
	PT_END(pt);
 1bc:	19 82       	std	Y+1, r1	; 0x01
 1be:	18 82       	st	Y, r1
 1c0:	83 e0       	ldi	r24, 0x03	; 3
 1c2:	01 c0       	rjmp	.+2      	; 0x1c6 <SegDyn+0xbc>
	static volatile uint8_t cathode=0;
	
	PT_BEGIN(pt);
	while (cathode<=SCR_SIZE-1)
	{
		PT_WAIT_UNTIL(pt, (st_millis()-last_timer)>=5);
 1c4:	80 e0       	ldi	r24, 0x00	; 0
		if (cathode==2) LCD_PORT_2|=(_BV(7));
		cathode++;
	}
	cathode=0;
	PT_END(pt);
}
 1c6:	df 91       	pop	r29
 1c8:	cf 91       	pop	r28
 1ca:	1f 91       	pop	r17
 1cc:	0f 91       	pop	r16
 1ce:	08 95       	ret

000001d0 <CurrentCalc>:
	static char *ptr;
	ptr=(char *)&SCR_D[0];
	ptr=utoa_fast_div((uint32_t)EncoderValue, ptr);
	PT_END(pt);
*/
	SCR_D[0]=(uint8_t)EncoderValue;
 1d0:	80 91 6b 00 	lds	r24, 0x006B
 1d4:	90 91 6c 00 	lds	r25, 0x006C
 1d8:	80 93 77 00 	sts	0x0077, r24
}
 1dc:	08 95       	ret

000001de <main>:

int main(void)
{

	//initiate ports
	DDRD=255;
 1de:	8f ef       	ldi	r24, 0xFF	; 255
 1e0:	81 bb       	out	0x11, r24	; 17
	DDRB=0b11000011;
 1e2:	83 ec       	ldi	r24, 0xC3	; 195
 1e4:	87 bb       	out	0x17, r24	; 23
	//DDRA='0b11010000';
	PORTD=PORTB=0;
 1e6:	18 ba       	out	0x18, r1	; 24
 1e8:	12 ba       	out	0x12, r1	; 18
	   PORTB PIN1 - out PWM TEC, PIN2- input ERROR_IN (RED_BUTTON), PIN3,PIN4 - inputs encoder, PIN5 - input encoder button  
	   PortA - Pin0 - Cur_Mon, Pin1 - V_mon, Pin2 - NTC1, PIN3 - NTC2, PIN4 - LD_PWM_OUT, PIN5 - DS raiator sensor

*/
	// Set prescaler to 64
	TCCR0 |= (_BV(CS01) | _BV(CS00));
 1ea:	83 b7       	in	r24, 0x33	; 51
 1ec:	83 60       	ori	r24, 0x03	; 3
 1ee:	83 bf       	out	0x33, r24	; 51
	// Enable interrupt
	TIMSK |= _BV(TOIE0);
 1f0:	89 b7       	in	r24, 0x39	; 57
 1f2:	81 60       	ori	r24, 0x01	; 1
 1f4:	89 bf       	out	0x39, r24	; 57
	// Set default value
	TCNT0 = ST_CTC_HANDMADE; //1ms tiks on 8mhz CPU clock
 1f6:	82 e8       	ldi	r24, 0x82	; 130
 1f8:	82 bf       	out	0x32, r24	; 50
		
	PT_INIT(&SegDyn_pt);
 1fa:	10 92 6e 00 	sts	0x006E, r1
 1fe:	10 92 6d 00 	sts	0x006D, r1
	PT_INIT(&EncoderScan_pt);
 202:	10 92 70 00 	sts	0x0070, r1
 206:	10 92 6f 00 	sts	0x006F, r1
	PT_INIT(&CurrentCalc_pt);
 20a:	10 92 72 00 	sts	0x0072, r1
 20e:	10 92 71 00 	sts	0x0071, r1
	sei();
 212:	78 94       	sei

    while(1)
    {
		SCR_D[0]=7;
 214:	0f 2e       	mov	r0, r31
 216:	f7 e7       	ldi	r31, 0x77	; 119
 218:	ef 2e       	mov	r14, r31
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	ff 2e       	mov	r15, r31
 21e:	f0 2d       	mov	r31, r0
 220:	0f 2e       	mov	r0, r31
 222:	f7 e0       	ldi	r31, 0x07	; 7
 224:	bf 2e       	mov	r11, r31
 226:	f0 2d       	mov	r31, r0
		SCR_D[1]=9;
 228:	08 e7       	ldi	r16, 0x78	; 120
 22a:	10 e0       	ldi	r17, 0x00	; 0
 22c:	0f 2e       	mov	r0, r31
 22e:	f9 e0       	ldi	r31, 0x09	; 9
 230:	cf 2e       	mov	r12, r31
 232:	f0 2d       	mov	r31, r0
		SCR_D[2]=2;
 234:	c9 e7       	ldi	r28, 0x79	; 121
 236:	d0 e0       	ldi	r29, 0x00	; 0
 238:	68 94       	set
 23a:	dd 24       	eor	r13, r13
 23c:	d1 f8       	bld	r13, 1
	PT_INIT(&CurrentCalc_pt);
	sei();

    while(1)
    {
		SCR_D[0]=7;
 23e:	f7 01       	movw	r30, r14
 240:	b0 82       	st	Z, r11
		SCR_D[1]=9;
 242:	f8 01       	movw	r30, r16
 244:	c0 82       	st	Z, r12
		SCR_D[2]=2;
 246:	d8 82       	st	Y, r13
		
		//EncoderScan(&EncoderScan_pt);
		//CurrentCalc(&CurrentCalc_pt);
		SegDyn(&SegDyn_pt);
 248:	8d e6       	ldi	r24, 0x6D	; 109
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	5e df       	rcall	.-324    	; 0x10a <SegDyn>
		EncoderScan(&EncoderScan_pt);
 24e:	8f e6       	ldi	r24, 0x6F	; 111
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	07 df       	rcall	.-498    	; 0x62 <EncoderScan>
		CurrentCalc(&CurrentCalc_pt);
 254:	81 e7       	ldi	r24, 0x71	; 113
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	bb df       	rcall	.-138    	; 0x1d0 <CurrentCalc>
 25a:	f1 cf       	rjmp	.-30     	; 0x23e <main+0x60>

0000025c <__vector_9>:
#include <util/atomic.h>

volatile static uint32_t st_timer0_millis;

ISR(TIMER0_OVF_vect)
{
 25c:	1f 92       	push	r1
 25e:	0f 92       	push	r0
 260:	0f b6       	in	r0, 0x3f	; 63
 262:	0f 92       	push	r0
 264:	11 24       	eor	r1, r1
 266:	8f 93       	push	r24
 268:	9f 93       	push	r25
 26a:	af 93       	push	r26
 26c:	bf 93       	push	r27
	st_timer0_millis++;
 26e:	80 91 73 00 	lds	r24, 0x0073
 272:	90 91 74 00 	lds	r25, 0x0074
 276:	a0 91 75 00 	lds	r26, 0x0075
 27a:	b0 91 76 00 	lds	r27, 0x0076
 27e:	01 96       	adiw	r24, 0x01	; 1
 280:	a1 1d       	adc	r26, r1
 282:	b1 1d       	adc	r27, r1
 284:	80 93 73 00 	sts	0x0073, r24
 288:	90 93 74 00 	sts	0x0074, r25
 28c:	a0 93 75 00 	sts	0x0075, r26
 290:	b0 93 76 00 	sts	0x0076, r27
	TCNT0 = ST_CTC_HANDMADE;
 294:	82 e8       	ldi	r24, 0x82	; 130
 296:	82 bf       	out	0x32, r24	; 50
}
 298:	bf 91       	pop	r27
 29a:	af 91       	pop	r26
 29c:	9f 91       	pop	r25
 29e:	8f 91       	pop	r24
 2a0:	0f 90       	pop	r0
 2a2:	0f be       	out	0x3f, r0	; 63
 2a4:	0f 90       	pop	r0
 2a6:	1f 90       	pop	r1
 2a8:	18 95       	reti

000002aa <st_millis>:

uint32_t st_millis(void)
{
 2aa:	0f 93       	push	r16
 2ac:	1f 93       	push	r17
	uint32_t m;

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 2ae:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 2b0:	f8 94       	cli
	{
		m = st_timer0_millis;
 2b2:	00 91 73 00 	lds	r16, 0x0073
 2b6:	10 91 74 00 	lds	r17, 0x0074
 2ba:	20 91 75 00 	lds	r18, 0x0075
 2be:	30 91 76 00 	lds	r19, 0x0076
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 2c2:	8f bf       	out	0x3f, r24	; 63
	}

	return m;
}
 2c4:	60 2f       	mov	r22, r16
 2c6:	71 2f       	mov	r23, r17
 2c8:	82 2f       	mov	r24, r18
 2ca:	93 2f       	mov	r25, r19
 2cc:	1f 91       	pop	r17
 2ce:	0f 91       	pop	r16
 2d0:	08 95       	ret

000002d2 <_exit>:
 2d2:	f8 94       	cli

000002d4 <__stop_program>:
 2d4:	ff cf       	rjmp	.-2      	; 0x2d4 <__stop_program>
